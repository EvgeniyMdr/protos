// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: posts/posts.proto

package postsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Posts_GetPost_FullMethodName    = "/posts.Posts/GetPost"
	Posts_CreatePost_FullMethodName = "/posts.Posts/CreatePost"
	Posts_GetPosts_FullMethodName   = "/posts.Posts/GetPosts"
	Posts_PatchPost_FullMethodName  = "/posts.Posts/PatchPost"
	Posts_PutPost_FullMethodName    = "/posts.Posts/PutPost"
	Posts_DeletePost_FullMethodName = "/posts.Posts/DeletePost"
)

// PostsClient is the client API for Posts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsClient interface {
	GetPost(ctx context.Context, in *GetPostDto, opts ...grpc.CallOption) (*PostDto, error)
	CreatePost(ctx context.Context, in *CreatePostDto, opts ...grpc.CallOption) (*PostDto, error)
	GetPosts(ctx context.Context, in *GetPostsDto, opts ...grpc.CallOption) (*PostsResponseDto, error)
	PatchPost(ctx context.Context, in *PatchRequestDto, opts ...grpc.CallOption) (*PostDto, error)
	PutPost(ctx context.Context, in *PutRequestDto, opts ...grpc.CallOption) (*PostDto, error)
	DeletePost(ctx context.Context, in *DeleteRequestDto, opts ...grpc.CallOption) (*DeleteResponseDto, error)
}

type postsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsClient(cc grpc.ClientConnInterface) PostsClient {
	return &postsClient{cc}
}

func (c *postsClient) GetPost(ctx context.Context, in *GetPostDto, opts ...grpc.CallOption) (*PostDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDto)
	err := c.cc.Invoke(ctx, Posts_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) CreatePost(ctx context.Context, in *CreatePostDto, opts ...grpc.CallOption) (*PostDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDto)
	err := c.cc.Invoke(ctx, Posts_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPosts(ctx context.Context, in *GetPostsDto, opts ...grpc.CallOption) (*PostsResponseDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostsResponseDto)
	err := c.cc.Invoke(ctx, Posts_GetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) PatchPost(ctx context.Context, in *PatchRequestDto, opts ...grpc.CallOption) (*PostDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDto)
	err := c.cc.Invoke(ctx, Posts_PatchPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) PutPost(ctx context.Context, in *PutRequestDto, opts ...grpc.CallOption) (*PostDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDto)
	err := c.cc.Invoke(ctx, Posts_PutPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeletePost(ctx context.Context, in *DeleteRequestDto, opts ...grpc.CallOption) (*DeleteResponseDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponseDto)
	err := c.cc.Invoke(ctx, Posts_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServer is the server API for Posts service.
// All implementations must embed UnimplementedPostsServer
// for forward compatibility.
type PostsServer interface {
	GetPost(context.Context, *GetPostDto) (*PostDto, error)
	CreatePost(context.Context, *CreatePostDto) (*PostDto, error)
	GetPosts(context.Context, *GetPostsDto) (*PostsResponseDto, error)
	PatchPost(context.Context, *PatchRequestDto) (*PostDto, error)
	PutPost(context.Context, *PutRequestDto) (*PostDto, error)
	DeletePost(context.Context, *DeleteRequestDto) (*DeleteResponseDto, error)
	mustEmbedUnimplementedPostsServer()
}

// UnimplementedPostsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostsServer struct{}

func (UnimplementedPostsServer) GetPost(context.Context, *GetPostDto) (*PostDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostsServer) CreatePost(context.Context, *CreatePostDto) (*PostDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsServer) GetPosts(context.Context, *GetPostsDto) (*PostsResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPostsServer) PatchPost(context.Context, *PatchRequestDto) (*PostDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPost not implemented")
}
func (UnimplementedPostsServer) PutPost(context.Context, *PutRequestDto) (*PostDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPost not implemented")
}
func (UnimplementedPostsServer) DeletePost(context.Context, *DeleteRequestDto) (*DeleteResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostsServer) mustEmbedUnimplementedPostsServer() {}
func (UnimplementedPostsServer) testEmbeddedByValue()               {}

// UnsafePostsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServer will
// result in compilation errors.
type UnsafePostsServer interface {
	mustEmbedUnimplementedPostsServer()
}

func RegisterPostsServer(s grpc.ServiceRegistrar, srv PostsServer) {
	// If the following call pancis, it indicates UnimplementedPostsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Posts_ServiceDesc, srv)
}

func _Posts_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPost(ctx, req.(*GetPostDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).CreatePost(ctx, req.(*CreatePostDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPosts(ctx, req.(*GetPostsDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_PatchPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).PatchPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_PatchPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).PatchPost(ctx, req.(*PatchRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_PutPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).PutPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_PutPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).PutPost(ctx, req.(*PutRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeletePost(ctx, req.(*DeleteRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

// Posts_ServiceDesc is the grpc.ServiceDesc for Posts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Posts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts.Posts",
	HandlerType: (*PostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _Posts_GetPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Posts_CreatePost_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _Posts_GetPosts_Handler,
		},
		{
			MethodName: "PatchPost",
			Handler:    _Posts_PatchPost_Handler,
		},
		{
			MethodName: "PutPost",
			Handler:    _Posts_PutPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Posts_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts/posts.proto",
}
